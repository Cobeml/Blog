{
  "hash": "bb94a2fcab040862da9f6a54ca698fb5",
  "result": {
    "markdown": "---\ntitle: \"Data Analysis\"\nauthor: \"Cobe Liu\"\ndate: \"2023-10-04\"\ncategories: [code, website, stroop, data]\nimage: \"image.png\"\n---\n\n\n## Sample Data Analusis\n\nDownloading Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install from the Packages tab, or run the below in the console once.\n#install.packages('tidyverse')\n#install.packages('rio')\n\n# load libraries\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(rio)\n\n# get data file names\nfile_names <- list.files(\"sample_data\",full.names = TRUE)\n\n# initialize data frame to hold individual subject data\nall_data <- tibble()\n\n# loop through each file and import\nfor(i in 1:length(file_names)) {\n  \n  # import a single data file to a temporary data frame\n  temp_df <- rio::import(file_names[i]) %>%\n    mutate(subject = i)\n  \n  # append the single subject data to larger data frame\n  all_data <- rbind(all_data,temp_df)\n  \n}\n```\n:::\n\n\nAnalysis of sample data analyzing reaction time differences between incongruent and congruent trials:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pre-process and filter rows\nfiltered_data <- all_data %>%\n  filter(task == \"stroop\",\n         correct == \"TRUE\") %>%\n  mutate(rt = as.numeric(rt))\n\n# get individual subject means in each condition\nsubject_mean_RT <- filtered_data %>%\n  group_by(subject,congruency) %>%\n  summarize(mean_rt = mean(rt), .groups = \"drop\")\n\n# get group means in each condition\ngroup_mean_RT <- subject_mean_RT %>%\n  group_by(congruency) %>%\n  summarize(mean_reaction_time = mean(mean_rt),\n            sem = sd(mean_rt)/sqrt(length(mean_rt))\n            )\n\n# plot\nggplot(group_mean_RT, aes(x=congruency,y=mean_reaction_time)) +\n  geom_bar(stat=\"identity\") +\n  geom_errorbar(aes(ymin=mean_reaction_time-sem,\n                    ymax=mean_reaction_time+sem),\n                width=.2) +\n  ylab(\"Mean Reaction Time (ms)\") +\n  xlab(\"Congruency\")+\n  coord_cartesian(ylim=c(400,800)) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nAnalysis of sample data analyzing error rate differences between congruent and incongruent trials:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pre-process and filter rows\nfiltered_data_pc <- all_data %>%\n  filter(task == \"stroop\")\n\n# get individual subject proportion correct values\nsubject_pc <- filtered_data_pc %>%\n  group_by(subject,congruency) %>%\n  summarize(proportion_correct = mean(correct), .groups = \"drop\")\n\n# get group means in each condition\ngroup_mean_pc <- subject_pc %>%\n  group_by(congruency) %>%\n  summarize(mean_proportion_correct = mean(proportion_correct),\n            sem = sd(proportion_correct)/sqrt(length(proportion_correct))\n            )\n\n# plot\nggplot(group_mean_pc, aes(x=congruency,y=mean_proportion_correct)) +\n  geom_bar(stat=\"identity\") +\n  geom_errorbar(aes(ymin=mean_proportion_correct-sem,\n                    ymax=mean_proportion_correct+sem),\n                width=.2) +\n  ylab(\"Mean Proportion Correct\") +\n  xlab(\"Congruency\")+\n  coord_cartesian(ylim=c(0.5,1)) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n[HTML Page](stroop.html)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}